name: CI/CD

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ main, dev ]
    paths-ignore:
      - '**/README.md'

env:
  APP_NAME: auth
  MIGRATOR_NAME: auth_migrator
  COMPOSE_FILE: docker-compose-prod.yaml
  DB_HOST: db
  DB_PORT: 5432
  MIGRATIONS_DIR: ./migrations
  GO_VERSION: 1.22

  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_CONNECTION_TIMEOUT_SEC: 5
  REDIS_MAX_IDLE: 10
  REDIS_MAX_ACTIVE: 10
  REDIS_IDLE_TIMEOUT_SEC: 300

  HOST: 0.0.0.0
  HTTP_PORT: 8080
  SWAGGER_PORT: 8090

  KAFKA_HOST_PORT_1: 29092
  KAFKA_PORT_1: 9092
  KAFKA_HOST_PORT_2: 29093
  KAFKA_PORT_2: 9093
  KAFKA_HOST_PORT_3: 29094
  KAFKA_PORT_3: 9094

  KAFKA_BROKERS: kafka1:${KAFKA_HOST_PORT_1},kafka2:${KAFKA_HOST_PORT_2},kafka3:${KAFKA_HOST_PORT_3}
  KAFKA_GROUP_ID: user
  KAFKA_TOPIC: users
  KAFKA_UI_PORT: 8082
  DYNAMIC_CONFIG_ENABLED: true
  ZOOKEEPER_CLIENT_PORT: 2181
  ZOOKEEPER_TICK_TIME: 2000
  KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}

  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  KAFKA_ADVERTISED_LISTENERS_1: PLAINTEXT://kafka1:${KAFKA_HOST_PORT_1},PLAINTEXT_HOST://localhost:${KAFKA_PORT_1}
  KAFKA_ADVERTISED_LISTENERS_2: PLAINTEXT://kafka2:${KAFKA_HOST_PORT_2},PLAINTEXT_HOST://localhost:${KAFKA_PORT_2}
  KAFKA_ADVERTISED_LISTENERS_3: PLAINTEXT://kafka3:${KAFKA_HOST_PORT_3},PLAINTEXT_HOST://localhost:${KAFKA_PORT_3}
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3

  HEALTHCHECK_INTERVAL: 10s
  HEALTHCHECK_TIMEOUT: 10s
  HEALTHCHECK_RETRIES: 3
  HEALTHCHECK_START_PERIOD: 10s

  REFRESH_TOKEN_EXPIRATION_MIN: 1440
  ACCESS_TOKEN_EXPIRATION_MIN: 240

  PROMETHEUS_PORT: 2112

  LOG_LEVEL: info
  LOG_FILENAME: logs/app.log
  LOG_MAX_SIZE_MB: 10
  LOG_MAX_BACKUPS: 3
  LOG_MAX_AGE_DAYS: 7

  REQUESTS_LIMIT: 100

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    name: Linter check
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-go@v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.0.1
        with:
          version: v1.59
          args: --timeout=30m --config=./.golangci.pipeline.yaml

  create_env_file:
    name: Create .env file
    runs-on: ubuntu-latest
    needs: linter
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.7

      - name: Create .env file
        run: |
          touch .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo MIGRATIONS_DIR=${{ env.MIGRATIONS_DIR }} >> .env
          echo DB_PORT=${{ env.DB_PORT }} >> .env
          echo DB_HOST=${{ env.DB_HOST }} >> .env
          echo DB_HOST_PORT=${{ secrets.DB_HOST_PORT }} >> .env
          
          echo GRPC_PORT=${{ secrets.GRPC_PORT }} >> .env
          echo GRPC_HOST=${{ env.HOST }} >> .env
          
          echo HTTP_PORT=${{ env.HTTP_PORT }} >> .env
          echo HTTP_HOST=${{ env.HOST }} >> .env
          
          echo SWAGGER_PORT=${{ env.SWAGGER_PORT }} >> .env
          echo SWAGGER_HOST=${{ env.HOST }} >> .env
          
          echo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} >> .env
          echo APP_NAME=${{ env.APP_NAME }} >> .env
          echo MIGRATOR_NAME=${{ env.MIGRATOR_NAME }} >> .env
          
          echo REDIS_HOST=${{ env.REDIS_HOST }} >> .env
          echo REDIS_HOST_PORT=${{ secrets.REDIS_HOST_PORT }} >> .env
          echo REDIS_PORT=${{ env.REDIS_PORT }} >> .env
          echo REDIS_CONNECTION_TIMEOUT_SEC=${{ env.REDIS_CONNECTION_TIMEOUT_SEC }} >> .env
          echo REDIS_MAX_IDLE=${{ env.REDIS_MAX_IDLE }} >> .env
          echo REDIS_MAX_ACTIVE=${{ env.REDIS_MAX_ACTIVE }} >> .env
          echo REDIS_IDLE_TIMEOUT_SEC=${{ env.REDIS_IDLE_TIMEOUT_SEC }} >> .env
          
          echo KAFKA_HOST_PORT_1=${{ env.KAFKA_HOST_PORT_1 }} >> .env
          echo KAFKA_PORT_1=${{ env.KAFKA_PORT_1 }} >> .env
          echo KAFKA_HOST_PORT_2=${{ env.KAFKA_HOST_PORT_2 }} >> .env
          echo KAFKA_PORT_2=${{ env.KAFKA_PORT_2 }} >> .env
          echo KAFKA_HOST_PORT_3=${{ env.KAFKA_HOST_PORT_3 }} >> .env
          echo KAFKA_PORT_3=${{ env.KAFKA_PORT_3 }} >> .env
          
          echo KAFKA_BROKERS=${{ env.KAFKA_BROKERS }} >> .env
          echo KAFKA_GROUP_ID=${{ env.KAFKA_GROUP_ID }} >> .env
          echo KAFKA_TOPIC=${{ env.KAFKA_TOPIC }} >> .env
          echo KAFKA_UI_PORT=${{ env.KAFKA_UI_PORT }} >> .env
          echo DYNAMIC_CONFIG_ENABLED=${{ env.DYNAMIC_CONFIG_ENABLED }} >> .env
          echo ZOOKEEPER_CLIENT_PORT=${{ env.ZOOKEEPER_CLIENT_PORT }} >> .env
          echo ZOOKEEPER_TICK_TIME=${{ env.ZOOKEEPER_TICK_TIME }} >> .env
          echo KAFKA_ZOOKEEPER_CONNECT=${{ env.KAFKA_ZOOKEEPER_CONNECT }} >> .env
          
          echo KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${{ env.KAFKA_LISTENER_SECURITY_PROTOCOL_MAP }} >> .env
          echo KAFKA_ADVERTISED_LISTENERS_1=${{ env.KAFKA_ADVERTISED_LISTENERS_1 }} >> .env
          echo KAFKA_ADVERTISED_LISTENERS_2=${{ env.KAFKA_ADVERTISED_LISTENERS_2 }} >> .env
          echo KAFKA_ADVERTISED_LISTENERS_3=${{ env.KAFKA_ADVERTISED_LISTENERS_3 }} >> .env
          echo KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${{ env.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR }} >> .env
          echo KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=${{ env.KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS }} >> .env
          echo KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=${{ env.KAFKA_TRANSACTION_STATE_LOG_MIN_ISR }} >> .env
          echo KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=${{ env.KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR }} >> .env
          
          echo HEALTHCHECK_INTERVAL=${{ env.HEALTHCHECK_INTERVAL }} >> .env
          echo HEALTHCHECK_TIMEOUT=${{ env.HEALTHCHECK_TIMEOUT }} >> .env
          echo HEALTHCHECK_RETRIES=${{ env.HEALTHCHECK_RETRIES }} >> .env
          echo HEALTHCHECK_START_PERIOD=${{ env.HEALTHCHECK_START_PERIOD }} >> .env

          echo TOKEN_SECRET_KEY=${{ secrets.TOKEN_SECRET_KEY }} >> .env
          echo REFRESH_TOKEN_EXPIRATION_MIN=${{ env.REFRESH_TOKEN_EXPIRATION_MIN }} >> .env
          echo ACCESS_TOKEN_EXPIRATION_MIN=${{ env.ACCESS_TOKEN_EXPIRATION_MIN }} >> .env
          
          echo PROMETHEUS_PORT=${{ env.PROMETHEUS_PORT }} >> .env
          echo PROMETHEUS_HOST=${{ env.HOST }} >> .env
          
          echo LOG_LEVEL=${{ env.LOG_LEVEL }} >> .env
          echo LOG_FILENAME=${{ env.LOG_FILENAME }} >> .env
          echo LOG_MAX_SIZE_MB=${{ env.LOG_MAX_SIZE_MB }} >> .env
          echo LOG_MAX_BACKUPS=${{ env.LOG_MAX_BACKUPS }} >> .env
          echo LOG_MAX_AGE_DAYS=${{ env.LOG_MAX_AGE_DAYS }} >> .env
          
          echo REQUESTS_LIMIT=${{ env.REQUESTS_LIMIT }} >> .env

      - name: Upload .env file as artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: env-file
          path: .env

  build_and_push_images_to_docker_hub:
    name: Building and pushing images to DockerHub
    runs-on: ubuntu-latest
    needs:
      - linter
      - create_env_file
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.7

      - name: Download .env artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: env-file

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.4.0

      - name: Login to Docker Hub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push server image to DockerHub
        uses: docker/build-push-action@v6.4.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

      - name: Push migrator image to DockerHub
        uses: docker/build-push-action@v6.4.0
        with:
          context: .
          file: migrator.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.MIGRATOR_NAME }}:latest

  deploy_to_remote_server:
    name: Deploying to remote server
    runs-on: ubuntu-latest
    needs: build_and_push_images_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.7

      - name: Download .env artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: env-file

      - name: Copy files to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "${{ env.COMPOSE_FILE }}, .env, prometheus.yml, alerts.yml"
          target: "./${{ env.APP_NAME }}"
          rm: true

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ env.APP_NAME }}
            
            docker compose -f ${{ env.COMPOSE_FILE }} down
            docker system prune -a -f
            docker image prune -a -f

            docker compose -f ${{ env.COMPOSE_FILE }} up -d
