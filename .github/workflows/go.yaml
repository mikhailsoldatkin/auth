name: CI

env:
  DOCKER_IMAGE_NAME: auth_server
  DB_HOST: db

on:
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ main, dev ]
    paths-ignore:
      - '**/README.md'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Set up Go
        uses: actions/setup-go@v5.0.2
        with:
          go-version: '1.22'
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-go@v5.0.2
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.0.1
        with:
          version: v1.59
          args: --timeout=30m --config=./.golangci.pipeline.yaml

  build_and_push_image_to_docker_hub:
    name: Pushing ${{ env.DOCKER_IMAGE_NAME }} image to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - linter
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.4.0

      - name: Login to Docker Hub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create tag for image from commit
        id: tag_name
        run: echo "TAG_NAME=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV

      - name: Push to Docker Hub
        uses: docker/build-push-action@v6.4.0
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}

  deploy:
    name: Deploying on remote server
    runs-on: ubuntu-latest
    needs:
      - build_and_push_image_to_docker_hub
    steps:
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@latest
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo rm -f .env
            sudo touch .env
            sudo chmod 666 .env
            
            sudo echo DB_NAME=${{ secrets.POSTGRES_DB }} >> .env
            sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo echo DB_HOST=${{ env.DB_HOST }} >> .env
            sudo echo MIGRATION_DIR=./migrations >> .env
            sudo echo GRPC_PORT=${{ secrets.GRPC_PORT }} >> .env
            sudo echo GRPC_HOST=${{ secrets.GRPC_HOST }} >> .env
            
            docker compose down
            
            docker compose rm ${{ env.DOCKER_IMAGE_NAME }}
            docker compose pull ${{ env.DOCKER_IMAGE_NAME }}
            
            docker compose up -d --build
