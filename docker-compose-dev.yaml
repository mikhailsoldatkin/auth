services:

  app:
    build:
      context: .
    container_name: ${APP_NAME}
    ports:
      - ${GRPC_PORT}:${GRPC_PORT}
      - ${HTTP_PORT}:${HTTP_PORT}
      - ${SWAGGER_PORT}:${SWAGGER_PORT}
    env_file:
      - .env
    networks:
      - microservices_network
      - internal_network
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_started
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy

  db:
    image: postgres:16.3-alpine3.20
    container_name: ${APP_NAME}_${DB_HOST}
    ports:
      - ${DB_HOST_PORT}:${DB_PORT}
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - internal_network

  migrator:
    build:
      context: .
      dockerfile: migrator.Dockerfile
    container_name: ${MIGRATOR_NAME}
    restart: on-failure
    networks:
      - internal_network

  redis:
    image: redis:7.4.0-alpine3.20
    container_name: ${APP_NAME}_redis
    ports:
      - ${REDIS_HOST_PORT}:${REDIS_PORT}
    volumes:
      - redisdata:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - ${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}
    env_file:
      - .env
    networks:
      - internal_network

  kafka1:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT_1}:${KAFKA_PORT_1}
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka1:${KAFKA_PORT_1}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS_1}
    networks:
      - internal_network

  kafka2:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT_2}:${KAFKA_PORT_2}
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka2:${KAFKA_PORT_2}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS_2}
    networks:
      - internal_network

  kafka3:
    image: confluentinc/cp-kafka:7.7.0
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT_3}:${KAFKA_PORT_3}
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka3:${KAFKA_PORT_3}" ]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS_3}
    networks:
      - internal_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - ${KAFKA_UI_PORT}:${HTTP_PORT}
    env_file:
      - .env
    networks:
      - internal_network

volumes:
  pgdata:
  redisdata:

networks:
  microservices_network:
    external: true
  internal_network:
    driver: bridge
